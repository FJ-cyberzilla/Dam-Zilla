      - name: 🔧 Create Configure Script
        run: |
          mkdir -p config
          # Create the configure file with FIXED installer script
          cat > config/configure << 'EOF'
#!/bin/bash

set -euo pipefail
LOGFILE="install.log"
# FIXED: Remove process substitution that doesn't work in basic shells
echo "🐉 ZILLA-DAM ENTERPRISE INSTALLER"

detect_platform() {
    case "$(uname -s)" in
        Linux*)     
            if [[ -f "/proc/version" ]] && grep -q "Microsoft" /proc/version; then
                echo "wsl"
            elif [[ -f "/etc/termux" ]]; then
                echo "termux" 
            else
                echo "linux"
            fi
            ;;
        Darwin*)    echo "mac" ;;
        CYGWIN*)    echo "cygwin" ;;
        MINGW*)     echo "gitbash" ;;
        *)          echo "unknown" ;;
    esac
}

PLATFORM=$(detect_platform)
echo "🔍 Detected platform: $PLATFORM"

install_dependencies() {
    echo "📦 Installing dependencies for $PLATFORM..."
    case $PLATFORM in
        "wsl"|"linux")
            sudo apt update
            sudo apt install -y nodejs npm python3 python3-pip git curl wget
            wget https://julialang-s3.julialang.org/bin/linux/x64/1.8/julia-1.8.5-linux-x86_64.tar.gz
            tar -xzf julia-1.8.5-linux-x86_64.tar.gz
            sudo mv julia-1.8.5 /opt/
            sudo ln -s /opt/julia-1.8.5/bin/julia /usr/local/bin/julia
            ;;
        "mac")
            if ! command -v brew &> /dev/null; then
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            brew install node npm python3 git curl wget
            brew install --cask julia
            ;;
        "termux")
            pkg update
            pkg install -y nodejs python git curl wget
            echo "⚠️  Julia ML engine limited on Termux"
            ;;
        *)
            echo "❌ Unsupported platform: $PLATFORM"
            exit 1
            ;;
    esac
}

setup_zilla_dam() {
    echo "🚀 Setting up ZILLA-DAM..."

    if [ ! -d "zilla-dam" ]; then
        echo "📥 Cloning ZILLA-DAM repository..."
        git clone https://github.com/zilla-dam/zilla-dam.git
    fi

    cd zilla-dam || { echo "❌ Failed to enter zilla-dam directory"; exit 1; }

    case $PLATFORM in
        "termux")
            echo "📱 Applying Termux optimizations..."
            export NODE_OPTIONS="--max-old-space-size=1024"
            ;;
        "wsl")
            echo "🪟 Applying WSL optimizations..."
            ;;
    esac

    echo "🧹 Sanitizing package files..."
    sed -i '/"gevent"/d' package.json || true
    sed -i '/"gevent"/d' package-lock.json || true

    echo "📦 Installing Node.js dependencies..."
    if ! npm install; then
        echo "❌ npm install failed. Check package.json for unresolved dependencies."
        exit 1
    fi

    echo "🔐 Initializing quantum security..."
    if [ -f security_lock.js ]; then
        node security_lock.js --init
    else
        echo "⚠️  security_lock.js not found. Skipping quantum security init."
    fi
}

install_dependencies
setup_zilla_dam

echo "✅ ZILLA-DAM installation complete for $PLATFORM!"
echo "🚀 Start with: cd zilla-dam && ./startup.sh"
EOF

          chmod +x config/configure
          echo "✅ Created config/configure with fixed installer"
